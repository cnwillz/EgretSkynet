/** Declaration file generated by dts-gen */


declare class JSZip {
    constructor(data: any, ...args: any[]);

    crc32(input: any, crc: any): any;

    file(name: any, ...args: any[]): any;

    filter(search: any): any;

    folder(arg: any): any;

    generate(options: any): any;

    load(data: any, options: any): any;

    remove(name: any): any;

    utf8decode(input: any): any;

    utf8encode(string: any): any;

    static compressions: {
        DEFLATE: {
            compress: any;
            compressInputType: string;
            magic: string;
            uncompress: any;
            uncompressInputType: string;
        };
        STORE: {
            compress: any;
            compressInputType: any;
            magic: string;
            uncompress: any;
            uncompressInputType: any;
        };
    };

    static defaults: {
        base64: boolean;
        binary: boolean;
        comment: any;
        compression: any;
        compressionOptions: any;
        createFolders: boolean;
        date: any;
        dir: boolean;
        dosPermissions: any;
        unixPermissions: any;
    };

    static support: {
        array: boolean;
        arraybuffer: boolean;
        base64: boolean;
        blob: boolean;
        nodebuffer: boolean;
        string: boolean;
        uint8array: boolean;
    };

}

declare namespace JSZip {
    namespace base64 {
        function decode(input: any): any;

        function encode(input: any): any;

    }

    namespace utils {
        const MAX_VALUE_16BITS: number;

        const MAX_VALUE_32BITS: number;

        function arrayBuffer2Blob(buffer: any): any;

        function checkSupport(type: any): any;

        function findCompression(compressionMethod: any): any;

        function getTypeOf(input: any): any;

        function isRegExp(object: any): any;

        function pretty(str: any): any;

        function string2Blob(str: any): any;

        function string2Uint8Array(str: any): any;

        function string2binary(str: any): any;

        function transformTo(outputType: any, input: any): any;

        function uint8Array2String(array: any): any;

    }

}

